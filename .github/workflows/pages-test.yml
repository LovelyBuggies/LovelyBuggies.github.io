name: GitHub Pages (test)

on:
  push:
    branches: ["test"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Install Pandoc
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc

      - name: Convert LaTeX sources to Markdown (build-only)
        shell: bash
        run: |
          set -e
          convert() {
            local tex="$1"; local bib="$2"; local out="$3"; local rpath="$4"; local title="$5"
            local dir
            dir="$(dirname "$tex")"
            mkdir -p "$(dirname "$out")"
            # Create a combined LaTeX file including simple \input{...} files from same dir
            tmptex="$(mktemp)"
            cp "$tex" "$tmptex"
            while IFS= read -r inc; do
              if [ -f "$dir/${inc}.tex" ]; then
                printf '\n' >> "$tmptex"
                cat "$dir/${inc}.tex" >> "$tmptex"
              fi
            done < <(sed -n 's/.*\\input{\\([^}]*\\)}.*/\1/p' "$tex")

            # Front matter (with title) and KaTeX shortcode
            printf '%s\n' '---' "title: \"${title}\"" 'math: true' '---' '' '{{< katex />}}' '' > "$out"
            # Run pandoc to append content
            pandoc "$tmptex" \
              --from=latex --to=gfm+tex_math_dollars \
              --resource-path="$rpath" \
              --citeproc --bibliography="$bib" \
              --wrap=none >> "$out"

            # Copy common image assets next to the output so relative links work
            for ext in png jpg jpeg svg gif pdf; do
              for f in "$dir"/*."$ext"; do
                [ -e "$f" ] && cp -n "$f" "$(dirname "$out")/" || true
              done
            done
            rm -f "$tmptex"
          }

          # PPO → RL
          if [ -f "archive/PPO/main.tex" ]; then
            convert "archive/PPO/main.tex" "archive/PPO/ref.bib" "notes/content/docs/rl/from-pg-2-ppo.md" "archive/PPO" "From PG 2 PPO" "/archive/PPO/"
          fi

          # Bellman → RL
          if [ -f "archive/Bellman/main.tex" ]; then
            convert "archive/Bellman/main.tex" "archive/Bellman/ref.bib" "notes/content/docs/rl/understanding-bellman.md" "archive/Bellman" "Understanding Bellman" "/archive/Bellman/"
          fi

          # Dec-POMDP Intro → RL/MARL
          if [ -f "archive/Dec-POMDP Intro/main.tex" ]; then
            convert "archive/Dec-POMDP Intro/main.tex" "archive/Dec-POMDP Intro/ref.bib" "notes/content/docs/rl/marl/introduction-2-decpomdp.md" "archive/Dec-POMDP Intro" "Introduction 2 DecPOMDP" "/archive/Dec-POMDP Intro/"
          fi

          # Optimal Q-Value in Dec-POMDP → RL/MARL
          if [ -f "archive/Optimal Q-Value in Dec-POMDP/main.tex" ]; then
            convert "archive/Optimal Q-Value in Dec-POMDP/main.tex" "archive/Optimal Q-Value in Dec-POMDP/ref.bib" "notes/content/docs/rl/marl/optimal-q-value-functions-for-dec-pomdp.md" "archive/Optimal Q-Value in Dec-POMDP" "Optimal Q Value Functions for Dec POMDP" "/archive/Optimal Q-Value in Dec-POMDP/"
          fi

          # LLM Reward → LLM
          if [ -f "archive/LLM Reward/main.tex" ]; then
            convert "archive/LLM Reward/main.tex" "archive/LLM Reward/ref.bib" "notes/content/docs/large-language-models/reward-modeling-llm.md" "archive/LLM Reward" "Reward Modeling LLM" "/archive/LLM Reward/"
          fi

          # Diffusion conversion removed per request

      - name: Setup Hugo (latest, extended)
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true

      - name: Build Notes via Hugo
        run: hugo --source notes --minify

      # No deploy on test workflow; build-only for validation
